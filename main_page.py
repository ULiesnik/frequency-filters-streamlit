from PIL import Image
from additional import *

st.set_page_config(page_title="Fourier transform filters", page_icon="üé®",layout="wide",
                    menu_items={"About":"–¶–µ–π –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É 2024 —Ä–æ—Ü—ñ —É –º–µ–∂–∞—Ö –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∏–ø–ª–æ–º–∞ –±–∞–∫–∞–ª–∞–≤—Ä–∞"})


st.header("**–ß–∞—Å—Ç–æ—Ç–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏**")

with open("tips.txt", 'r',encoding="utf-8") as f:
    st.sidebar.markdown(f.read())

image_file = st.file_uploader("–û–±–µ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —â–æ–± –ø–æ—á–∞—Ç–∏:", 
                    type=["png", "jpg", "jpeg"], 
                    on_change=img_changed,
                    help="–í—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –¥—ñ–π –±—É–¥–µ –≤—Ç—Ä–∞—á–µ–Ω–æ " \
                    "—â–æ—Ä–∞–∑—É, –∫–æ–ª–∏ –±—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª")
css='''
<style>
[data-testid="stFileUploaderDropzone"] div div::before {content:"–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª —á–∏ –ø—ñ–¥—Ç—è–≥–Ω—ñ—Ç—å –π–æ–≥–æ —Å—é–¥–∏"}
[data-testid="stFileUploaderDropzone"] div div span{display:none;}
[data-testid="stFileUploaderDropzone"] div div::after {color:red; font-size: .8em; content:"–õ—ñ–º—ñ—Ç: 200MB –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É"}
[data-testid="stFileUploaderDropzone"] div div small{display:none;}
[data-testid="stFileUploaderDropzone"] button {visibility: hidden;}
[data-testid="stFileUploaderDropzone"] button::after {content:"–®—É–∫–∞—Ç–∏ —Ñ–∞–π–ª";  visibility: visible;}
</style>
'''

st.markdown(css, unsafe_allow_html=True)

if image_file is not None:

    st.write("–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ —Å–≤—ñ—Ç–ª–∏–Ω–∞:")
    st.image(image_file)
    st.divider()

    left1, right1 = st.columns(2)

    with left1:

        st.write("–ß–æ—Ä–Ω–æ-–±—ñ–ª–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:")
        img = Image.open(image_file).convert('L')
        st.image(img)

        image_bytes = img_to_bytes(img)
        st.download_button("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —á–æ—Ä–Ω–æ-–±—ñ–ª–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", image_bytes,
                                    file_name="grayscale_"+image_file.name, mime="image/png")
        image = crop_to_even_shape(np.array(img))

    with right1:

        if st.session_state["new"]:
            st.button("–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –§—É—Ä'—î", on_click=apply_transform, args=(image,True))
        
        else:
            st.write("–°–ø–µ–∫—Ç—Ä –≤–µ–ª–∏—á–∏–Ω:")
            spectrum = ft.spectrum(st.session_state["original_ft"])
            spectrum_image = Image.fromarray(spectrum).convert('L')
            st.image(spectrum_image)

            spectrum_bytes = img_to_bytes(spectrum_image)
            st.download_button("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–µ–∫—Ç—Ä—É", spectrum_bytes,
                file_name="spectr_"+image_file.name, mime="image/png")

    if st.session_state["original_ft"] is not None:

        st.divider()
        st.header("–ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Ñ—ñ–ª—å—Ç—Ä:")
        filter_option = st.radio( "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –í–∞–º —Ñ—ñ–ª—å—Ç—Ä:",
                        ["–Ü–∑ –ø—Ä–æ–ø—É—Å–∫–æ–º –Ω–∏–∑—å–∫–∏—Ö —á–∞—Å—Ç–æ—Ç", "–Ü–∑ –ø—Ä–æ–ø—É—Å–∫–æ–º –≤–∏—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç", 
                        "–°–º—É–≥–æ–≤–∏–π 1", "–°–º—É–≥–æ–≤–∏–π 2"],
                        captions = ["–ó–º—ñ–Ω–∞ –¥–ª—è —á–∞—Å—Ç–æ—Ç, –Ω–∏–∂—á–∏—Ö –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –∑—Ä—ñ–∑—É", 
                                    "–ó–º—ñ–Ω–∞ –¥–ª—è —á–∞—Å—Ç–æ—Ç, –≤–∏—â–∏—Ö –∑–∞ –∑–Ω–∞—á–µ–Ω–Ω—è –∑—Ä—ñ–∑—É", 
                                    "–ó–º—ñ–Ω–∞ –∑–Ω–∞—á–µ–Ω—å —á–∞—Å—Ç–æ—Ç –º—ñ–∂ –¥–≤–æ–º–∞ –∑–∞–¥–∞–Ω–∏–º–∏ d",
                                    "–ó–º—ñ–Ω–∞ –¥–ª—è –≤—Å—ñ—Ö —á–∞—Å—Ç–æ—Ç, –∫—Ä—ñ–º —Ç–∏—Ö, —â–æ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω—ñ –º—ñ–∂ d0 i d1"])

        _min, _max, _average = d_values(st.session_state["original_ft"])

        if filter_option == "–Ü–∑ –ø—Ä–æ–ø—É—Å–∫–æ–º –Ω–∏–∑—å–∫–∏—Ö —á–∞—Å—Ç–æ—Ç" or filter_option == "–Ü–∑ –ø—Ä–æ–ø—É—Å–∫–æ–º –≤–∏—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç":
            d0 = st.number_input("–ó–∞–¥–∞–π—Ç–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑—Ä—ñ–∑—É:",_min, _max, _average,
                        help=f"–í—ñ–¥—Å—Ç–∞–Ω—å –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É —Å–ø–µ–∫—Ç—Ä—É. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —â–æ –º–æ–∂–Ω–∞ –∑–∞–¥–∞—Ç–∏, —Å—Ç–∞–Ω–æ–≤–∏—Ç—å {_max}, –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ - {_min}")
            d1 = None
        
        if filter_option == "–°–º—É–≥–æ–≤–∏–π 1" or filter_option == "–°–º—É–≥–æ–≤–∏–π 2" :
            d0 = st.number_input("–í–∫–∞–∂—ñ—Ç—å –Ω–∏–∂—á–µ –∑–Ω–∞—á–µ–Ω–Ω—è d:",_min, _max, _average*0.8,
                        help=f"–í—ñ–¥—Å—Ç–∞–Ω—å –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É —Å–ø–µ–∫—Ç—Ä—É. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —â–æ –º–æ–∂–Ω–∞ –∑–∞–¥–∞—Ç–∏, —Å—Ç–∞–Ω–æ–≤–∏—Ç—å {_max}, –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ - {_min}")
            d1 = st.number_input("–í–∫–∞–∂—ñ—Ç—å –≤–∏—â–µ –∑–Ω–∞—á–µ–Ω–Ω—è d:",_min, _max, _average*1.2)

        coef = st.slider("–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç, –Ω–∞ —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–º–Ω–æ–∂–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—ñ —Ñ—ñ–ª—å—Ç—Ä –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",0.0,3.0,1.0,0.05,
                                help="–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç 1 –∑–∞–ª–∏—à–∏—Ç—å –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç —É –ø–æ—á–∞—Ç–∫–æ–≤–æ–º—É —Å—Ç–∞–Ω—ñ")

        st.button("–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä",on_click=apply_filter,args=(filter_option,d0, d1, coef))

        if st.session_state["filtered_ft"] is not None:

            st.divider()
            left2, right2 = st.columns(2)

            with left2:

                st.write("–°–ø–µ–∫—Ç—Ä –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó:")
                spectrum_filtered = ft.spectrum(st.session_state["filtered_ft"])
                spectrum_filtered_image = Image.fromarray(spectrum_filtered).convert('L')
                st.image(spectrum_filtered_image)

                filtered_spectrum_bytes = img_to_bytes(spectrum_filtered_image)
                st.download_button("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", filtered_spectrum_bytes,
                                    file_name="filtered_spectr_"+image_file.name, mime="image/png")
            with right2:

                st.write("–°–≤—ñ—Ç–ª–∏–Ω–∞ –ø—ñ—Å–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è:")
                transform_filtered = ft.reverse_ft_shift(st.session_state["filtered_ft"])
                image_filtered = ft.reverse_fft2(transform_filtered)
                img_result = np.abs(image_filtered)

                image_result = Image.fromarray(img_result).convert('L')
                st.image(image_result)

                image_result_bytes = img_to_bytes(image_result)
                st.download_button("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–µ —Ñ–æ—Ç–æ", image_result_bytes,
                                    file_name="filtered_"+image_file.name, mime="image/png")

st.divider()

# –ø—Ä–∏–∫–ª–∞–¥–∏
if "examples_shown" not in st.session_state:
    st.session_state["examples_shown"] = False
    st.button("–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏", on_click=show_examples)
else:
    if not st.session_state["examples_shown"]:
        st.button("–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏", on_click=show_examples)
    else:
        st.button("–ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏", on_click=hide_examples)
        st.write("–ù–∏–∂—á–µ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–æ –∫—ñ–ª—å–∫–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–∏—Ö —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–æ –æ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        for example in examples_dicts:
            st.write(example["Descryption"])
            left, right = st. columns(2)
            with left:
                st.image(example["Spectrum"])
            with right:
                st.image(example["Image"])
        st.button("–ó–≥–æ—Ä–Ω—É—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏", on_click=hide_examples)
